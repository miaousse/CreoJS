function isLibrary(inputString) {
	if (inputString.startsWith('P00')) {
        return false;
    }
    return /^[A-Z]\d{7}/.test(inputString);
}

function displayDialogBox(textMessage, dialogBoxLabel = 'Info', dialogType = 'INFO', dialogButton = 'OK') {
    const session = pfcGetProESession();
    const messageDialogSettings = pfcCreate('pfcMessageDialogOptions').Create();

    messageDialogSettings.DialogLabel = dialogBoxLabel;
    messageDialogSettings.MessageDialogType = dialogBoxType(dialogType);
    messageDialogSettings.DefaultButton = dialogBoxButton(dialogButton);

    session.UIShowMessageDialog(textMessage, messageDialogSettings);
}

function dialogBoxType(dialogType) {
    const TYPE = pfcCreate('pfcMessageDialogType');
    const messageTypeMap = {
        'QUESTION': TYPE.MESSAGE_QUESTION,
        'INFO': TYPE.MESSAGE_INFO,
        'WARNING': TYPE.MESSAGE_WARNING
    };

    return messageTypeMap[dialogType.toUpperCase()] || null;
}

function dialogBoxButton(dialogBoxButtonType) {
    const MESSAGE_BUTTON = pfcCreate('pfcMessageButton');
    const buttonTypeMap = {
        'OK': MESSAGE_BUTTON.MESSAGE_BUTTON_OK,
        'YES': MESSAGE_BUTTON.MESSAGE_BUTTON_YES,
        'NO': MESSAGE_BUTTON.MESSAGE_BUTTON_NO,
        'ABORT': MESSAGE_BUTTON.MESSAGE_BUTTON_ABORT,
        'RETRY': MESSAGE_BUTTON.MESSAGE_BUTTON_RETRY,
        'IGNORE': MESSAGE_BUTTON.MESSAGE_BUTTON_IGNORE,
        'CONFIRM': MESSAGE_BUTTON.MESSAGE_BUTTON_CONFIRM
    };

    return buttonTypeMap[dialogBoxButtonType.toUpperCase()] || null;
}

function getParameterValue(name) {
    if (!currentSolid) return '/';
    const parameter = model.GetParam(name);

    return parameter ? getValue(parameter) : '/';
}

function ExportPdf(fullName, indice, indice_min) {
    const session = pfcGetCurrentSession();
	const model = session.CurrentModel;
    model.Save();

    const EXPORTPATH = 'C:\\CAO\\PDF_STEP\\';

	const exportFileName = `${EXPORTPATH}${fullName}-${indice}${indice_min}`;

	const PDFExportInstructions = pfcPDFExportInstructions.Create();
	PDFExportInstructions.FilePath = EXPORTPATH;
	PDFExportInstructions.ProfilePath = 'S:\\Config\\Creo 10.0\\Exportation\\PDF_depagne.dop';
	model.Export(exportFileName, PDFExportInstructions);
	const currentWindow = session.CurrentWindow;
	currentWindow.Repaint();
}
function ExportStep(fullName, indice, indice_min) {
    const session = pfcGetCurrentSession();
    let model = session.CurrentModel;

    const exportPath = 'C:\\CAO\\PDF_STEP\\';

    if (model.Type === pfcModelType.MDL_DRAWING) {
        model = model.GetCurrentSolid();
    }

    const exportFileName = `${exportPath}${fullName}-${indice}${indice_min}`;

    const GeometryFlags = pfcGeometryFlags.Create();
    GeometryFlags.AsQuilts = false;
    GeometryFlags.AsSolids = true;
    GeometryFlags.AsSurfaces = false;
    GeometryFlags.AsWireframe = false;

    const modelExport = pfcAssemblyConfiguration.EXPORT_ASM_SINGLE_FILE;
    const modelInstruction = pfcSTEP3DExportInstructions.Create(modelExport, GeometryFlags);

    model.Export(exportFileName, modelInstruction);
}
